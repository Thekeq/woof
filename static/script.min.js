setInterval((()=>{(window.outerWidth-window.innerWidth>100||window.outerHeight-window.innerHeight>100)&&location.reload()}),500);const userId=window.userId,inviteItemsData={limited:[],"in-game":[],partners:[]};async function loadTasks(e="limited"){try{await update_balance(userId),inviteItemsData.limited=[],inviteItemsData["in-game"]=[],inviteItemsData.partners=[];const t=await fetch(`/api/tasks?userId=${userId}`);(await t.json()).forEach((e=>{inviteItemsData[e.type]&&inviteItemsData[e.type].push(e)})),updateTaskCount("in-game"),updateTaskCount("limited"),updateTaskCount("partners"),showQuest(`${e}`)}catch(e){console.error("Error loading tasks:",e)}}async function loadFrens(e){const t=await user_info(e),n=t.frens_list.split(","),s=t.frens_time.split(","),a=t.frens_rewards,i=t.frens_count;document.querySelector("#frens .count").textContent=`${i.toString()} users`;const o=document.getElementById("frens-container");o&&(o.innerHTML="",0!==n.length&&0!==s.length&&(n.length===s.length&&n.length===i?n.forEach(((e,n)=>{const i=document.createElement("div");i.classList.add("invite-item");const c=Math.floor(parseFloat(s[n])),r=new Date(1e3*c).toLocaleString("en-US",{month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}),l=t.frens_id.split(",")[n],d=a[l];let m=0;d&&d.Age&&(m=d.Age);const u=`\n                <div class="main-info">\n                    <div class="icon-con">\n                        <img alt="" loading="lazy" width="18" height="18" decoding="async" data-nimg="1" src="/static/media/invite.svg" style="color: transparent;">\n                    </div>\n                    <div class="wallet-con">\n                        <div class="wallet">${e}</div> \x3c!-- Имя друга --\x3e\n                        <div class="date">${r}</div> \x3c!-- Время --\x3e\n                    </div>\n                </div>\n                <div class="points">\n                    <p class="amount">${Math.round(.15*m)} WOOFS</p>\n                    <p class="descr">Received</p>\n                </div>\n            `;i.innerHTML=u,o.appendChild(i)})):console.error("Data mismatch: frens_list, frens_time, and frens_count must have the same length.")))}async function loadLeaderboard(e=0,t=100,n=null){try{const s=await fetch(`/api/leaderboard?page=${e}&limit=${t}&userId=${n}`),a=await s.json();if(a.success){const e=a.data.list,t=a.data.userData,n=a.data.userData.position,s=t.find((e=>e.rank===n)),i=document.getElementById("leaders-list"),o=document.querySelector("#leaders .total-users .count"),c=document.querySelector(".user-item-con");o.textContent=`${a.data.count.toLocaleString()} users`,i.innerHTML="",c&&s&&(c.querySelector(".wallet").textContent=s.username||"Anonymous",c.querySelector(".balance").textContent=`${s.balance.toLocaleString()} WOOFS`,c.querySelector(".place").textContent=`#${s.position}`),e.forEach((e=>{const t=document.createElement("div");t.className="leader-icon-con",t.innerHTML=`\n                    <div class="side-info">\n                        <div class="img-con">\n                            <img alt="" loading="lazy" width="25" height="25" decoding="async" src="/static/media/woofsLogoBlack.svg" style="color: transparent;">\n                        </div>\n                        <div class="main-info-con">\n                            <div class="wallet">${e.username||"Anonymous"}</div>\n                            <div class="balance">${e.balance.toLocaleString()} WOOFS</div>\n                        </div>\n                    </div>\n                    <div class="place">#${e.rank}</div>\n                `,i.appendChild(t)}))}else console.error(a.error)}catch(e){console.error("Error loading leaderboard:",e)}}async function loadRewards(e){try{const t=await fetch(`/api/rewards?userId=${e}`),n=await t.json();if(n.success){const e=document.querySelector(".section-items-con.transactions");e.innerHTML="",n.data.forEach((t=>{const n=document.createElement("div");"Age"===t.title&&(t.title="Telegram Age",t.src="/static/media/telegram.svg"),"checkin"===t.title&&(t.title="Daily Check-In",t.src="/static/media/check.svg",t.amount*=100),"Welcome"===t.title&&(t.title="Welcome bonus!",t.src="/static/media/wooflogo.svg"),"premium"===t.title&&(t.title="Telegram Premium!",t.src="/static/media/premium.svg"),"subTG"===t.title&&(t.title="Follow channel",t.src="/static/media/telegram.svg"),"partner"===t.title&&(t.title="Follow partner",t.src="/static/media/telegram.svg"),"invite"===t.title&&(t.title="Task completed",t.src="/static/media/invitefren.svg"),"newyear"===t.title&&(t.title="Happy New Year!",t.src="https://em-content.zobj.net/source/telegram/361/christmas-tree_1f384.webp"),"Complete Task (Frens)"===t.title&&(t.title="Task completed",t.src="/static/media/invitefren.svg"),"Boost"===t.title&&(t.title="Boost Channel",t.src="/static/media/boost.png"),n.className="invite-item",n.innerHTML=`\n                    <div class="main-info">\n                        <div class="icon-con">\n                            <img alt="" loading="lazy" width="40" height="40" decoding="async" src=${t.src} style="color: transparent;">\n                        </div>\n                        <div class="wallet-con">\n                            <div class="wallet">${t.title}</div>\n                            <div class="date">Your reward <3</div>\n                        </div>\n                    </div>\n                    <div class="points">\n                        <p>+${t.amount.toLocaleString()} WOOFS</p>\n                        <p class="descr">Received</p>\n                    </div>\n                `,e.appendChild(n)}));const t=document.createElement("div");t.className="show-more",t.textContent="Show more"}else console.error("Failed to fetch rewards:",n.error)}catch(e){console.error("Error loading rewards:",e)}}function updateTaskCount(e,t){["limited","in-game","partners"].forEach((e=>{showQuest(`${e}`);const t=document.querySelectorAll(".invite-item .start-btn").length,n=document.querySelector(`#${e} .count`);n&&(0===t?n.style.display="none":n.textContent=t.toString())})),showQuest(`${t}`)}function showTab(e){document.querySelectorAll(".tab-content").forEach((e=>{e.style.display="none"}));document.querySelectorAll(".tab-content").forEach((e=>{e.classList.remove("active")}));document.querySelectorAll(".nav-item").forEach((e=>{e.classList.remove("active")}));const t=document.getElementById(e);t&&(t.style.display="flex");const n=document.getElementById(e);n&&n.classList.add("active");const s=document.querySelector(`.nav-item[onclick="showTab('${e}')"]`);s&&s.classList.add("active")}function showRewards(e){const t=document.getElementById(e);t&&(t.style.display="flex");const n=document.getElementById(e);n&&n.classList.add("active")}function showQuest(e){document.querySelectorAll(".type-item").forEach((e=>{e.classList.remove("active")}));const t=document.getElementById(e);t&&t.classList.add("active");const n=document.getElementById("quests-container");n.innerHTML="";(inviteItemsData[e]||[]).forEach((e=>{const t=document.createElement("div");t.classList.add("invite-item");let s=`\n            <div class="main-info">\n                <div class="icon-con">\n                    <img alt="" loading="lazy" width="40" height="40" decoding="async" src="${e.icon}" style="color: transparent;">\n                </div>\n                <div class="wallet-con">\n                    <div class="wallet">${e.description}</div>\n                    <p class="reward-count">${e.reward}</p>\n                </div>\n            </div>`;3===e.id?e.completed?s+=`\n                    <div class="points" id="task-${e.id}">\n                        <div class="check-con">\n                            <img alt="" loading="lazy" width="16" height="14" decoding="async" data-nimg="1" src="/static/media/done.svg" style="color: transparent;">\n                        </div>\n                    </div>\n                `:s+=`\n                        <div class="points" id="task-${e.id}">\n                            <div class="start-btn" onclick="${e.onclick}">Check</div>\n                        </div>\n                    `:4===e.id?e.completed?s+=`\n                    <div class="points" id="task-${e.id}">\n                        <div class="check-con">\n                            <img alt="" loading="lazy" width="16" height="14" decoding="async" data-nimg="1" src="/static/media/done.svg" style="color: transparent;">\n                        </div>\n                    </div>\n                `:s+=`\n                        <div class="points" id="task-${e.id}">\n                            <div class="start-btn" onclick="${e.onclick}">Start</div>\n                        </div>\n                    `:e.remaining_time>0?(s+=`\n                <div class="points" id="task-${e.id}">\n                    <div class="cooldown">Available in ${formatTime(e.remaining_time)}</div>\n                </div>\n            `,startCountdown(e.id,Math.ceil(e.remaining_time))):e.completed?s+=`\n                    <div class="points" id="task-${e.id}">\n                        <div class="check-con">\n                            <img alt="" loading="lazy" width="16" height="14" decoding="async" data-nimg="1" src="/static/media/done.svg" style="color: transparent;">\n                        </div>\n                    </div>\n                `:2===e.id?s+=`\n                        <div class="points" id="task-${e.id}">\n                            <div class="start-btn" onclick="${e.onclick}">Start</div>\n                            <div class="loading-animation" style="display: none;">Sending transaction...</div>\n                        </div>\n                    `:s+=`\n                        <div class="points">\n                            <div class="start-btn" onclick="${e.onclick}">Start</div>\n                        </div>\n                    `,t.innerHTML=s,n.appendChild(t)}))}function formatTime(e){return`${Math.floor(e/3600)}:${Math.floor(e%3600/60).toString().padStart(2,"0")}`}const activeIntervals={};function startCountdown(e,t){if(activeIntervals[e])return;const n=setInterval((()=>{if(t<=0){clearInterval(n),delete activeIntervals[e];const t=document.getElementById(`task-${e}`);return void(t&&(t.innerHTML=`<div class="start-btn" onclick="checkin(${userId})">Start</div>`,t.innerHTML+='<div class="loading-animation" style="display: none;">Sending transaction...</div>'))}const s=document.getElementById(`task-${e}`);s&&(s.innerHTML=`<div class="cooldown">Available in ${formatTime(t)}</div>`),t--}),1e3);activeIntervals[e]=n}async function subscribeToTelegram(e){window.TelegramWebApp.openTelegramLink("https://t.me/woofsupfam");try{const t=await fetch("/completeTask",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,task_id:1,type:"subTG"})});t.ok;const n=await t.json();if("success"===n.status){const e=document.querySelector(".type-item.active");loadTasks(e.id)}else console.error("Task completion failed:",n.message)}catch(e){console.error("Error completing task:",e)}}async function partnerTelegram(e,t,n){window.TelegramWebApp.openTelegramLink(t);try{const t=await fetch("/completeTask",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,task_id:n,type:"partner"})});t.ok;const s=await t.json();if("success"===s.status){const e=document.querySelector(".type-item.active");loadTasks(e.id)}else console.error("Task completion failed:",s.message)}catch(e){console.error("Error completing task:",e)}}async function boostChannel(e,t,n){window.TelegramWebApp.openTelegramLink(t);try{const t=await fetch("/checkMembership",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,channel:"boost/woofsupfam"})}),s=await t.json();"success"===s.status&&s.isMember?(await fetch("/completeTask",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,task_id:n,type:"Boost"})}),window.TelegramWebApp.showAlert("Task completed successfully!")):window.TelegramWebApp.showAlert("You need to join or boost the channel first!")}catch(e){window.TelegramWebApp.showAlert("An error occurred while processing your task. Please try again."),console.error("Error:",e)}}async function user_friends(e){if((await user_info(e)).frens_count>=10)try{const t=await fetch("/completeTask",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,task_id:3,type:"invite"})});t.ok;const n=await t.json();if("success"===n.status){const t=document.querySelector(".type-item.active");loadTasks(t.id),loadRewards(e)}else console.error("Task completion failed:",n.message)}catch(e){console.error("Error completing task:",e)}else invite(e)}async function invite_fren_limit(e,t,n){if((await user_info(e)).frens_count>=t)try{const t=await fetch("/completeTask",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,task_id:n,type:"Complete Task (Frens)"})});t.ok;const s=await t.json();if("success"===s.status){const t=document.querySelector(".type-item.active");loadTasks(t.id),loadRewards(e)}else console.error("Task completion failed:",s.message)}catch(e){console.error("Error completing task:",e)}else invite(e)}async function user_premium(e){if(!0===premium)try{const t=await fetch("/completeTask",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,task_id:3,type:"premium"})});t.ok;const n=await t.json();if("success"===n.status){const t=document.querySelector(".type-item.active");loadTasks(t.id),loadRewards(e)}else console.error("Task completion failed:",n.message)}catch(e){console.error("Error completing task:",e)}}async function user_info(e){try{const t=await fetch(`/userInfo?userId=${e}`);return t.ok,await t.json()}catch(e){console.error("Error update balance")}}async function update_balance(e){let t;try{t=await user_info(e),balance=t.balance,console.log(t);const n=document.querySelector("#home .count");n&&(n.textContent=balance)}catch(e){console.error("Error update balance")}}function invite(e){const t=`https://t.me/share/url?url=${encodeURIComponent(`https://t.me/WOOFSOG_bot?start=${e}`)}`;window.TelegramWebApp.openTelegramLink(t)}document.addEventListener("DOMContentLoaded",(()=>{showQuest("limited"),showTab("home"),loadTasks(),loadFrens(userId),loadLeaderboard(0,100,userId)})),window.onload=function(){document.getElementById("loading-screen").style.display="none"};